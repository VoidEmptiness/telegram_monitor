from telethon import TelegramClient, events
import os
import logging
from dotenv import load_dotenv
from telethon.tl.types import InputPeerChannel
from telethon.tl.functions.channels import GetFullChannelRequest
from telethon.errors import ChannelInvalidError, ChannelPrivateError
from telethon.sessions import StringSession
import requests
import signal
import sys
from datetime import datetime, timedelta
import pytz
import asyncio
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    filename='telegram_monitor.log',
    filemode='w'
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
API_ID = os.getenv('API_ID')
API_HASH = os.getenv('API_HASH')
BOT_TOKEN = os.getenv('BOT_TOKEN')
CHANNEL_USERNAME = os.getenv('CHANNEL_USERNAME')
KEYWORDS = os.getenv('KEYWORDS', '').split(',') if os.getenv('KEYWORDS') else []
PERSONAL_CHAT_ID = int(os.getenv('PERSONAL_CHAT_ID'))

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–µ—Å—Å–∏–∏
SESSION_FILE = 'telegram_session.session'

# –°—á–µ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π Ctrl+C
exit_count = 0

def signal_handler(sig, frame):
    global exit_count
    exit_count += 1
    
    if exit_count == 1:
        print("\nüõë –ù–∞–∂–º–∏—Ç–µ Ctrl+C –µ—â–µ —Ä–∞–∑ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
    elif exit_count >= 2:
        print("\nüëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã...")
        os._exit(0)  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–∞
signal.signal(signal.SIGINT, signal_handler)

def extract_username_from_link(channel_link):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç username –∏–∑ –ø–æ–ª–Ω–æ–π —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª"""
    logger.debug(f"–í—Ö–æ–¥–Ω–∞—è —Å—Å—ã–ª–∫–∞: {channel_link}")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ —Å '+' –≤ —Å—Å—ã–ª–∫–µ
    if channel_link.startswith('https://t.me/+'):
        return [channel_link.replace('https://t.me/', '')]
    
    # –í–∞—Ä–∏–∞–Ω—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Å—ã–ª–∫–∏
    variants = [
        channel_link.replace('https://t.me/', '').replace('t.me/', ''),  # –ë–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤
        channel_link.replace('https://t.me/', '@').replace('t.me/', '@'),  # –° @
    ]
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã, —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
    clean_variants = [
        variant.split('+')[0].strip()  # –£–±–∏—Ä–∞–µ–º '+' –∏ –ø—Ä–æ–±–µ–ª—ã
        for variant in variants
    ]
    
    logger.debug(f"–í–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {clean_variants}")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π –Ω–µ–ø—É—Å—Ç–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
    for variant in clean_variants:
        if variant and not variant.startswith('+'):
            return [variant]
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π username
    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å username –∏–∑ —Å—Å—ã–ª–∫–∏: {channel_link}")
    return [channel_link]

async def send_notification(client, message):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Bot API.
    """
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        system_message = (
            "üö® <b>–°–ò–°–¢–ï–ú–ê –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê</b> üö®\n\n"
            "–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É!\n\n"
            "–î–µ—Ç–∞–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:\n"
        )
        
        # –ü–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º
        full_message = system_message + message
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ Bot API
        try:
            url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
            params = {
                "chat_id": PERSONAL_CHAT_ID,
                "text": full_message,
                "parse_mode": "HTML"
            }
            
            response = requests.post(url, params=params)
            
            if response.status_code == 200:
                print("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                return True
            else:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
                return False
        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")
            return False
    
    except Exception as favorite_error:
        print(f"‚ùå –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞")
        return False

def get_local_time(hours_back=12):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
    
    :param hours_back: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥
    :return: –õ–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤ UTC
    """
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤—Ä–µ–º–µ–Ω–∏
    try:
        with open('config.json', 'r') as f:
            time_config = json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        time_config = {
            'custom_utc_time': None,
            'time_offset_hours': 12
        }
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤–æ–µ –≤—Ä–µ–º—è
    if time_config.get('custom_utc_time'):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ UTC –≤—Ä–µ–º—è
        base_time = datetime.fromisoformat(time_config['custom_utc_time']).replace(tzinfo=pytz.UTC)
    else:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–µ–µ –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
        base_time = datetime.now().astimezone(pytz.UTC)
    
    # –í—ã—á–∏—Ç–∞–µ–º —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤
    time_threshold = base_time - timedelta(hours=time_config.get('time_offset_hours', hours_back))
    
    # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
    print(f"üï∞Ô∏è –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è (UTC): {base_time}")
    
    return time_threshold

async def check_recent_messages(client, channel_entity, keywords, hours=12):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —á–∞—Å–æ–≤ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    
    :param client: –ö–ª–∏–µ–Ω—Ç Telegram
    :param channel_entity: –û–±—ä–µ–∫—Ç –∫–∞–Ω–∞–ª–∞
    :param keywords: –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    :param hours: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    :return: –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
        time_threshold = get_local_time(hours)
        print(f"üï∞Ô∏è –ü–æ—Ä–æ–≥ –≤—Ä–µ–º–µ–Ω–∏ (UTC): {time_threshold}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —á–∞—Å–æ–≤
        messages = await client.get_messages(
            channel_entity, 
            limit=None,  # –£–±–∏—Ä–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ
            offset_date=datetime.now(pytz.utc)  # –ù–∞—á–∏–Ω–∞–µ–º —Å —Ç–µ–∫—É—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞
        )
        
        # –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        matched_messages = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        for message in messages:
            # –î–µ–ª–∞–µ–º datetime —Å–æ–æ–±—â–µ–Ω–∏—è timezone-aware
            message_date = message.date.replace(tzinfo=pytz.utc) if message.date else None
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º None –∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å—Ç–∞—Ä—à–µ –ø–æ—Ä–æ–≥–∞
            if not message or not message_date or message_date < time_threshold:
                continue
            
            message_text = message.message or ''
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
            for keyword in keywords:
                if keyword.strip().lower() in message_text.lower():
                    matched_messages.append({
                        'text': message_text,
                        'date': message_date,
                        'keyword': keyword
                    })
                    break  # –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        
        return matched_messages
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
        return []

async def main():
    try:
        print("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –ú–æ–Ω–∏—Ç–æ—Ä–∞...")
        print("=" * 50)
        print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
        print("–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        if not all([API_ID, API_HASH, CHANNEL_USERNAME, KEYWORDS, PERSONAL_CHAT_ID]):
            print("‚ùå –û—à–∏–±–∫–∞: –ù–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ .env —Ñ–∞–π–ª–µ!")
            return

        print(f"‚úÖ –ö–∞–Ω–∞–ª –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {CHANNEL_USERNAME}")
        print(f"üîç –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {', '.join(KEYWORDS)}")
        print(f"üì® –õ–∏—á–Ω—ã–π —á–∞—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {PERSONAL_CHAT_ID}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Telegram
        print("\nüîê –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Telegram...")
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Bot Token
        client = TelegramClient('bot_session', API_ID, API_HASH)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è
        signal.signal(signal.SIGINT, signal_handler)
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Bot Token
        await client.start(bot_token=BOT_TOKEN)
        
        print("\nüåê –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram...")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –±–æ—Ç–µ
        try:
            me = await client.get_me()
            print(f"ü§ñ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫ –±–æ—Ç: {me.first_name} {me.last_name or ''}")
        except Exception as bot_error:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ: {bot_error}")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
        try:
            print("\nüîé –ü–æ–∏—Å–∫ –∫–∞–Ω–∞–ª–∞...")
            username_variants = extract_username_from_link(CHANNEL_USERNAME)
            channel_entity = None
            
            for variant in username_variants:
                try:
                    print(f"üïµÔ∏è –ü—Ä–æ–±—É—é –ø–æ–ª—É—á–∏—Ç—å –∫–∞–Ω–∞–ª: {variant}")
                    
                    try:
                        channel_entity = await client.get_entity(variant)
                        print(f"‚úÖ –ö–∞–Ω–∞–ª –Ω–∞–π–¥–µ–Ω: {channel_entity.title}")
                        break
                    except ValueError as ve:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞: {ve}")
                        print("–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
                        print("1. –ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞")
                        print("2. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞")
                        print("3. –ü—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–∞–≤–∞–º–∏ –±–æ—Ç–∞")
                    
                except Exception as entity_error:
                    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞–Ω–∞–ª —Å –≤–∞—Ä–∏–∞–Ω—Ç–æ–º {variant}: {entity_error}")
            
            if not channel_entity:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞–Ω–∞–ª. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Å—Å—ã–ª–∫–∏.")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–ª–µ–Ω—Å—Ç–≤–æ –≤ –∫–∞–Ω–∞–ª–µ
            try:
                full_channel = await client(GetFullChannelRequest(channel_entity))
                participants_count = full_channel.full_chat.participants_count
                print(f"üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞: {participants_count}")
            except Exception as membership_error:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á–ª–µ–Ω—Å—Ç–≤–æ –≤ –∫–∞–Ω–∞–ª–µ: {membership_error}")
                print("–í–æ–∑–º–æ–∂–Ω–æ, –±–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É")
                return
            
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ä–∞–±–æ—Ç—ã
            print("\n‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 15 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
            await asyncio.sleep(15)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
            print("\nüï∞Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 12 —á–∞—Å–æ–≤...")
            recent_matched_messages = await check_recent_messages(client, channel_entity, KEYWORDS)
            
            if recent_matched_messages:
                print(f"üö® –ù–∞–π–¥–µ–Ω–æ {len(recent_matched_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏!")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
                for msg in recent_matched_messages:
                    notification_message = (
                        f"üì¢ –ù–∞–π–¥–µ–Ω–æ —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ {CHANNEL_USERNAME}\n"
                        f"üïí –î–∞—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {msg['date'].strftime('%Y-%m-%d %H:%M:%S')}\n"
                        f"üîç –ù–∞–π–¥–µ–Ω–Ω–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: {msg['keyword']}\n\n"
                        f"üìù –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:\n{msg['text']}"
                    )
                    await send_notification(client, notification_message)
            else:
                print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–π —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ –∑–∞ 12 —á–∞—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            @client.on(events.NewMessage(chats=channel_entity))
            async def new_message_handler(event):
                try:
                    message_text = event.message.message
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
                    matched_keywords = []
                    for keyword in KEYWORDS:
                        if keyword.strip().lower() in message_text.lower():
                            matched_keywords.append(keyword)
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –µ—Å—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
                    if matched_keywords:
                        notification_message = (
                            f"üì¢ –ö–∞–Ω–∞–ª: {CHANNEL_USERNAME}\n"
                            f"üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {', '.join(matched_keywords)}\n\n"
                            f"üìù –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:\n{message_text}"
                        )
                        
                        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                        await send_notification(client, notification_message)
                
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
            
            # –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞
            await client.run_until_disconnected()
        
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞: {e}")
            return
    
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
